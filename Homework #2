#lang pl 02

;=================Q1==================
#|
 <SE> ::= <String>
         | <Chars>
         | <Num>
 
 <D> ::= 0|1|2|3|4|5|6|7|8|9 - one of 10 options
 
 <Chars> :: = #\<D> | #\<D> <Chars> - #\2 #\9
 
 <Num> ::= <D>
          | <D> <Num>
          |{string-length <String> }- can represent the string length
 
 <String> ::= <Num>
             |{ string-append <String> <String>} - (string-append(#\2 #\2) "0")
             |{ string-append <String> <Chars>}  - (string-append("2066" #\8)
             |{ string-append <String>}          
             |{ string-insert <String> <Chars> <Num>}- (string-insert "2066" #\8 4)
             |{ number->string <Num>} - string length

 =========part b=========

 ( string-append "45" ( number->string ( string-length "003" ) ))
 <SE> = > <String>
        > < {string-append <String> <String>}
        > < {string-append <Num> <String>}
        > < {string-append <D> <String>}
        > < {string-append "4<D>" <String>}
        > < {string-append "45" <String>}
        > < {string-append "45" number->string <Num>}
        > < {string-append "45" number->string ( string-length <String>)}
        > < {string-append "45" number->string ( string-length "003")}
      
 

 ( number->string ( string-length "0033344" ) )
 <SE> = > <String>
        > {number->string (<Num>)}
        > {number->string ( string-length <String> )}
        > {number->string ( string-length "0033344")}
     

 (string-length "2066")
 <SE> = > <String>
        > <Num>
        > {string-length <String>}
        > {string-length "2066"}
    

 |#
 ;================Q2==================

#|
we were asked to write a sum of square function which takes a list of numbers as input
and produces a number which is the sum of the squares of all of the numbers in the list
for that we built the function 'sqr' which receives a number as input and returns its square.
we also used the 'foldl' which generalizes some iteration functions. It uses the
per-element function to both process an element and combine it with the “current” value,
so the per-element function takes an extra first argument.
Also, a starting “current” value must be provided before the lists.
|#
(: sqr : Number -> Number)
(define (sqr x) (* x x))

(: sum_of_square : (Listof Number) -> Number)
(define (sum_of_square lst)
(foldl + 0 (map sqr lst)))

;======tests=======
(test (sum_of_square '(1 2 3)) => 14)
(test (sum_of_square '(0 0 0)) => 0)
(test (sum_of_square '(0 1 2)) => 5)
(test (sum_of_square '(10 10 10 10)) => 400)


;==================Q3===========================
; expt function taking two numbers 𝑎 and 𝑏, and returning 𝑎^𝑏.
#|
 poly : x - a given number , power -a power value that is raised in each round by 1,
accum - and the accumulator that will hold the final value for us at each stage
if we will get an empty list we will return the accum value, else we will use a tail recursion on the rest of the list
that the pow value will up in 1 every time
|#

 (: createPolynomial : (Listof Number) -> (Number -> Number))
(define (createPolynomial coeffs)
 (: poly : (Listof Number) Number Integer Number ->
Number)
 (define (poly argsL x power accum)
 (if (null? argsL) accum
 (poly (rest argsL) x (+ power 1) (+ accum (* (first argsL) (expt x power))))))
 (: polyX : Number -> Number)
 (define (polyX x)
 (poly coeffs x 0 0))
 polyX)

;=========test=======
(define p2345 (createPolynomial '(2 3 4 5))) 
(test (p2345 0) =>  
   (+ (* 2 (expt 0 0)) (* 3 (expt 0 1)) (* 4 (expt 0 2)) (* 5 
(expt 0 3)))) 
(test (p2345 4) =>  
   (+ (* 2 (expt 4 0)) (* 3 (expt 4 1)) (* 4 (expt 4 2)) (* 5 (expt 4 3)))) 
(test (p2345 11) => (+ (* 2 (expt 11 0)) (* 3 (expt 11 1)) (* 4 (expt 11 2)) (* 5 (expt 11 3)))) 
 
 
(define p536 (createPolynomial '(5 3 6))) 
(test (p536 11) => (+ (* 5 (expt 11 0)) (* 3 (expt 11 1)) (* 6 
(expt 11 2)))) 
 
(define p_0 (createPolynomial '())) 
(test (p_0 4) => 0) 

(define p2066 (createPolynomial '(2 0 6 6)))
(test (p2066 0) =>  
   (+ (* 2 (expt 0 0)) (* 0 (expt 0 1)) (* 6 (expt 0 2)) (* 6 
(expt 0 3))))
(test (p2066 1) =>  
   (+ (* 2 (expt 1 0)) (* 0 (expt 1 1)) (* 6 (expt 1 2)) (* 6 
(expt 1 3))))

